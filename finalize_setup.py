#!/usr/bin/env python3
"""
Script de Finaliza√ß√£o - F5 YouTube Optimizer
Ajuda a configurar as √∫ltimas 3 vari√°veis necess√°rias
"""

import os
import webbrowser

def print_header():
    print("=" * 70)
    print("üéØ FINALIZA√á√ÉO DA CONFIGURA√á√ÉO - F5 YOUTUBE OPTIMIZER")
    print("=" * 70)
    print("Vamos configurar as 3 √∫ltimas vari√°veis necess√°rias!\n")

def collect_credentials():
    """Coleta as credenciais do usu√°rio"""
    credentials = {}
    
    print("üìù VAMOS COLETAR AS 3 CREDENCIAIS NECESS√ÅRIAS:")
    print()
    
    # 1. API Key do YouTube
    print("1Ô∏è‚É£  API KEY DO YOUTUBE:")
    print("   ‚Ä¢ Se ainda n√£o criou, digite 'abrir' para abrir o Google Cloud Console")
    api_key = input("   ‚Ä¢ Cole sua API Key aqui: ").strip()
    
    if api_key.lower() == 'abrir':
        webbrowser.open('https://console.cloud.google.com/apis/credentials?project=fabled-orbit-466718-j9')
        api_key = input("   ‚Ä¢ Ap√≥s criar, cole a API Key aqui: ").strip()
    
    credentials['YOUTUBE_API_KEY'] = api_key
    
    # 2. Channel ID
    print("\n2Ô∏è‚É£  ID DO CANAL F5:")
    print("   ‚Ä¢ Se n√£o souber o ID, digite 'abrir' para usar a ferramenta online")
    channel_id = input("   ‚Ä¢ Cole o Channel ID (UC...): ").strip()
    
    if channel_id.lower() == 'abrir':
        webbrowser.open('https://commentpicker.com/youtube-channel-id.php')
        channel_id = input("   ‚Ä¢ Ap√≥s obter, cole o Channel ID aqui: ").strip()
    
    credentials['F5_CHANNEL_ID'] = channel_id
    
    # 3. Claude API Key
    print("\n3Ô∏è‚É£  CLAUDE API KEY:")
    print("   ‚Ä¢ Se ainda n√£o criou, digite 'abrir' para abrir o console da Anthropic")
    claude_key = input("   ‚Ä¢ Cole sua Claude API Key (sk-ant-...): ").strip()
    
    if claude_key.lower() == 'abrir':
        webbrowser.open('https://console.anthropic.com/')
        claude_key = input("   ‚Ä¢ Ap√≥s criar, cole a Claude API Key aqui: ").strip()
    
    credentials['ANTHROPIC_API_KEY'] = claude_key
    
    return credentials

def create_final_env_file(credentials):
    """Cria arquivo .env final"""
    env_content = f"""# ========================================
# F5 YOUTUBE OPTIMIZER - CONFIGURA√á√ÉO COMPLETA
# ========================================

# APIS DO YOUTUBE - CONFIGURADAS ‚úÖ
YOUTUBE_API_KEY={credentials['YOUTUBE_API_KEY']}
F5_CHANNEL_ID={credentials['F5_CHANNEL_ID']}

# CREDENCIAIS OAUTH - CONFIGURADAS ‚úÖ
YOUTUBE_CLIENT_SECRETS_FILE=client_secret.json

# GOOGLE CLOUD - CONFIGURADO ‚úÖ
GOOGLE_CLOUD_PROJECT=fabled-orbit-466718-j9

# IA PRINCIPAL - CONFIGURADA ‚úÖ
ANTHROPIC_API_KEY={credentials['ANTHROPIC_API_KEY']}

# IA FALLBACK (OPCIONAL)
OPENAI_API_KEY=sk-sua_openai_key_aqui

# CONFIGURA√á√ïES PADR√ÉO
ENVIRONMENT=development
DEBUG=True
DATA_COLLECTION_INTERVAL=3600
MAX_VIDEOS_PER_REQUEST=50
API_RATE_LIMIT=100
DATABASE_URL=sqlite:///f5_youtube_optimizer.db
DATABASE_ECHO=False

# STATUS: CONFIGURA√á√ÉO COMPLETA ‚úÖ
"""
    
    # Salvar arquivo .env
    with open('.env', 'w') as f:
        f.write(env_content)
    
    print("\n‚úÖ Arquivo .env criado com sucesso!")

def validate_credentials(credentials):
    """Valida formato das credenciais"""
    errors = []
    
    # Validar API Key (deve ter pelo menos 30 caracteres)
    if len(credentials['YOUTUBE_API_KEY']) < 30:
        errors.append("API Key do YouTube parece inv√°lida (muito curta)")
    
    # Validar Channel ID (deve come√ßar com UC)
    if not credentials['F5_CHANNEL_ID'].startswith('UC'):
        errors.append("Channel ID deve come√ßar com 'UC'")
    
    # Validar Claude Key (deve come√ßar com sk-ant-)
    if not credentials['ANTHROPIC_API_KEY'].startswith('sk-ant-'):
        errors.append("Claude API Key deve come√ßar com 'sk-ant-'")
    
    if errors:
        print("\n‚ö†Ô∏è  AVISOS:")
        for error in errors:
            print(f"   ‚Ä¢ {error}")
        
        confirm = input("\nContinuar mesmo assim? (s/n): ")
        return confirm.lower() == 's'
    
    return True

def test_system():
    """Testa o sistema"""
    print("\nüß™ TESTANDO SISTEMA...")
    
    try:
        # Testar importa√ß√£o b√°sica
        from config import validate_config
        validate_config()
        print("‚úÖ Configura√ß√£o v√°lida!")
        
        print("\nüöÄ SISTEMA PRONTO!")
        print("Execute um dos comandos:")
        print("   python main.py                          # Dashboard")
        print("   python main.py --mode suggestions       # Sugest√µes de conte√∫do")
        print("   python main.py --mode analysis          # An√°lise completa")
        
    except Exception as e:
        print(f"‚ùå Erro na configura√ß√£o: {e}")
        print("Verifique as credenciais e tente novamente")

def main():
    """Fun√ß√£o principal"""
    print_header()
    
    # Verificar se j√° temos .env
    if os.path.exists('.env'):
        response = input("Arquivo .env j√° existe. Recriar? (s/n): ")
        if response.lower() != 's':
            print("Mantendo configura√ß√£o existente.")
            return
    
    # Coletar credenciais
    credentials = collect_credentials()
    
    # Validar
    if not validate_credentials(credentials):
        print("Configura√ß√£o cancelada.")
        return
    
    # Criar arquivo .env
    create_final_env_file(credentials)
    
    # Testar sistema
    test_system()
    
    print("\nüéâ CONFIGURA√á√ÉO FINALIZADA!")
    print("=" * 70)

if __name__ == "__main__":
    main() 
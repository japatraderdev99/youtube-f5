#!/usr/bin/env python3
"""
Script de Setup - Sistema de Otimiza√ß√£o YouTube F5 Estrat√©gia
Este script auxilia na configura√ß√£o inicial das APIs e credenciais
"""

import os
import sys
import json
import webbrowser
from pathlib import Path

def print_header():
    """Exibe cabe√ßalho do script"""
    print("=" * 70)
    print("üöÄ SETUP - SISTEMA DE OTIMIZA√á√ÉO YOUTUBE F5 ESTRAT√âGIA")
    print("=" * 70)
    print("Este script ir√° te guiar na configura√ß√£o das APIs do YouTube\n")

def check_python_version():
    """Verifica vers√£o do Python"""
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8 ou superior √© necess√°rio")
        print(f"   Vers√£o atual: {sys.version}")
        sys.exit(1)
    else:
        print(f"‚úÖ Python {sys.version.split()[0]} detectado")

def install_dependencies():
    """Instala depend√™ncias do projeto"""
    print("\nüì¶ INSTALANDO DEPEND√äNCIAS...")
    
    try:
        import subprocess
        result = subprocess.run([
            sys.executable, "-m", "pip", "install", "-r", "requirements.txt"
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Depend√™ncias instaladas com sucesso")
        else:
            print("‚ùå Erro ao instalar depend√™ncias:")
            print(result.stderr)
            return False
    except Exception as e:
        print(f"‚ùå Erro ao instalar depend√™ncias: {e}")
        return False
    
    return True

def create_env_file():
    """Cria arquivo .env baseado no template"""
    print("\nüìù CONFIGURANDO ARQUIVO .env...")
    
    if os.path.exists('.env'):
        response = input("Arquivo .env j√° existe. Sobrescrever? (s/n): ")
        if response.lower() != 's':
            print("Mantendo arquivo .env existente")
            return
    
    # Copiar template
    if os.path.exists('setup_env_template.env'):
        with open('setup_env_template.env', 'r') as template:
            content = template.read()
        
        with open('.env', 'w') as env_file:
            env_file.write(content)
        
        print("‚úÖ Arquivo .env criado baseado no template")
        print("‚ö†Ô∏è  IMPORTANTE: Edite o arquivo .env com suas credenciais reais")
    else:
        print("‚ùå Template .env n√£o encontrado")

def check_credentials_file():
    """Verifica se arquivo de credenciais OAuth existe"""
    print("\nüîë VERIFICANDO CREDENCIAIS OAUTH...")
    
    if os.path.exists('client_secret.json'):
        print("‚úÖ Arquivo client_secret.json encontrado")
        return True
    else:
        print("‚ùå Arquivo client_secret.json n√£o encontrado")
        print("üìù Voc√™ precisa baixar este arquivo do Google Cloud Console")
        return False

def get_google_cloud_setup_instructions():
    """Retorna instru√ß√µes detalhadas para Google Cloud"""
    return """
üîß INSTRU√á√ïES GOOGLE CLOUD CONSOLE:

1Ô∏è‚É£  CRIAR PROJETO:
   ‚Ä¢ Acesse: https://console.cloud.google.com/
   ‚Ä¢ Clique em "Selecionar projeto" ‚Üí "NOVO PROJETO"
   ‚Ä¢ Nome: F5-YouTube-Analytics-System
   ‚Ä¢ Clique em "CRIAR"

2Ô∏è‚É£  HABILITAR APIs:
   ‚Ä¢ Menu ‚Üí "APIs e servi√ßos" ‚Üí "Biblioteca"
   ‚Ä¢ Busque e ATIVE:
     - YouTube Data API v3
     - YouTube Analytics API  
     - YouTube Reporting API

3Ô∏è‚É£  CONFIGURAR OAUTH:
   ‚Ä¢ Menu ‚Üí "APIs e servi√ßos" ‚Üí "Tela de consentimento OAuth"
   ‚Ä¢ Tipo: EXTERNO ‚Üí CRIAR
   ‚Ä¢ Preencha informa√ß√µes da F5 Estrat√©gia
   ‚Ä¢ Adicionar escopos:
     - https://www.googleapis.com/auth/youtube.readonly
     - https://www.googleapis.com/auth/yt-analytics.readonly
     - https://www.googleapis.com/auth/yt-analytics-monetary.readonly

4Ô∏è‚É£  CRIAR CREDENCIAIS:
   ‚Ä¢ Menu ‚Üí "APIs e servi√ßos" ‚Üí "Credenciais"
   ‚Ä¢ "+ CRIAR CREDENCIAIS" ‚Üí "ID do cliente OAuth"
   ‚Ä¢ Tipo: Aplicativo da √°rea de trabalho
   ‚Ä¢ Nome: F5 YouTube Analytics Client
   ‚Ä¢ BAIXAR como "client_secret.json"

5Ô∏è‚É£  CRIAR API KEY:
   ‚Ä¢ "+ CRIAR CREDENCIAIS" ‚Üí "Chave de API"
   ‚Ä¢ RESTRINGIR CHAVE ‚Üí Selecionar APIs do YouTube
   ‚Ä¢ Copiar a chave para o arquivo .env
"""

def get_channel_id_instructions():
    """Instru√ß√µes para obter ID do canal"""
    return """
üì∫ COMO OBTER ID DO CANAL F5:

M√âTODO 1 - Via URL:
   ‚Ä¢ Acesse o canal no YouTube
   ‚Ä¢ Na URL, procure por algo como: youtube.com/channel/UC...
   ‚Ä¢ O ID √© a parte ap√≥s /channel/

M√âTODO 2 - Via C√≥digo-fonte:
   ‚Ä¢ Acesse o canal no YouTube
   ‚Ä¢ Clique com bot√£o direito ‚Üí "Ver c√≥digo-fonte"
   ‚Ä¢ Procure por "channel_id" (Ctrl+F)

M√âTODO 3 - Ferramenta online:
   ‚Ä¢ Acesse: https://commentpicker.com/youtube-channel-id.php
   ‚Ä¢ Cole a URL do canal da F5
   ‚Ä¢ Clique em "Get Channel ID"
"""

def get_anthropic_setup():
    """Instru√ß√µes para configurar Claude (Anthropic)"""
    return """
ü§ñ CONFIGURAR CLAUDE (ANTHROPIC) - IA PRINCIPAL:

1Ô∏è‚É£  CRIAR CONTA:
   ‚Ä¢ Acesse: https://console.anthropic.com/
   ‚Ä¢ Fa√ßa login/registro com email da F5

2Ô∏è‚É£  OBTER API KEY:
   ‚Ä¢ Menu ‚Üí "API Keys"
   ‚Ä¢ Clique em "Create Key"
   ‚Ä¢ Nome: F5-YouTube-Optimizer
   ‚Ä¢ Copie a chave (sk-ant-...)

3Ô∏è‚É£  CONFIGURAR NO .env:
   ‚Ä¢ Abra o arquivo .env
   ‚Ä¢ Cole a chave em: ANTHROPIC_API_KEY=sk-ant-sua_chave_aqui

üí° FALLBACK OPENAI (OPCIONAL):
   ‚Ä¢ Se quiser usar OpenAI como backup
   ‚Ä¢ Acesse: https://platform.openai.com/api-keys
   ‚Ä¢ Configure: OPENAI_API_KEY=sk-sua_chave_aqui
"""

def run_setup_wizard():
    """Executa o assistente de configura√ß√£o"""
    print_header()
    
    # Verificar Python
    check_python_version()
    
    # Instalar depend√™ncias
    if not install_dependencies():
        print("\n‚ùå Setup interrompido devido a erro nas depend√™ncias")
        return
    
    # Criar arquivo .env
    create_env_file()
    
    # Verificar credenciais
    credentials_ok = check_credentials_file()
    
    print("\n" + "="*70)
    print("üìã PR√ìXIMOS PASSOS:")
    print("="*70)
    
    if not credentials_ok:
        print("\n1Ô∏è‚É£  CONFIGURAR GOOGLE CLOUD:")
        print(get_google_cloud_setup_instructions())
        
        response = input("\nAbrir Google Cloud Console no navegador? (s/n): ")
        if response.lower() == 's':
            webbrowser.open('https://console.cloud.google.com/')
    
    print("\n2Ô∏è‚É£  OBTER ID DO CANAL:")
    print(get_channel_id_instructions())
    
    print("\n3Ô∏è‚É£  CONFIGURAR IA:")
    print(get_anthropic_setup())
    
    response = input("\nAbrir console do Anthropic no navegador? (s/n): ")
    if response.lower() == 's':
        webbrowser.open('https://console.anthropic.com/')
    
    print("\n" + "="*70)
    print("üéØ FINALIZANDO SETUP:")
    print("="*70)
    print("1. Edite o arquivo .env com suas credenciais")
    print("2. Coloque o arquivo client_secret.json na pasta do projeto")
    print("3. Execute: python main.py")
    print("\n‚úÖ Setup conclu√≠do!")

def check_setup_status():
    """Verifica status da configura√ß√£o"""
    print("\nüîç VERIFICANDO CONFIGURA√á√ÉO ATUAL...")
    
    status = {
        'env_file': os.path.exists('.env'),
        'credentials_file': os.path.exists('client_secret.json'),
        'dependencies': True  # Assumindo que foi instalado
    }
    
    print(f"üìÑ Arquivo .env: {'‚úÖ' if status['env_file'] else '‚ùå'}")
    print(f"üîë Credenciais OAuth: {'‚úÖ' if status['credentials_file'] else '‚ùå'}")
    print(f"üì¶ Depend√™ncias: {'‚úÖ' if status['dependencies'] else '‚ùå'}")
    
    if all(status.values()):
        print("\nüéâ Configura√ß√£o parece estar completa!")
        print("Execute: python main.py")
    else:
        print("\n‚ö†Ô∏è  Configura√ß√£o incompleta. Execute python setup.py novamente")

if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] == "check":
        check_setup_status()
    else:
        run_setup_wizard() 